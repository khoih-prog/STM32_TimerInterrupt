{
  "name": "STM32_TimerInterrupt",
  "version": "1.3.0",
  "keywords": "timing, device, control, timer, interrupt, isr, isr-based, hardware-timer, mission-critical, accuracy, precise, non-blocking, stm32, stm32h7, stm32l5, stm32f1, stm32f4, stm32f7, stm32g4, hardware",
  "description": "This library enables you to use Interrupt from Hardware Timers on an STM32F/L/H/G/WB/MP1-based board. It now supports 16 ISR-based timers, while consuming only 1 Hardware Timer. Timers' interval is very long (ulong millisecs). The most important feature is they're ISR-based timers. Therefore, their executions are not blocked by bad-behaving functions or tasks. This important feature is absolutely necessary for mission-critical tasks. These hardware timers, using interrupt, still work even if other functions are blocking. Moreover, they are much more precise (certainly depending on clock frequency accuracy) than other software timers using millis() or micros(). That's necessary if you need to measure some data requiring better accuracy.",
  "authors":
  {
    "name":  "Khoi Hoang",
    "url":   "https://github.com/khoih-prog",
    "maintainer": true
  },
  "repository":
  {
    "type": "git",
    "url": "//https://github.com/khoih-prog/STM32_TimerInterrupt"
  },
  "homepage": "https://github.com/khoih-prog/STM32_TimerInterrupt",
  "export": {
    "exclude": [
      "linux",
      "extras",
      "tests"
    ]
  },
  "license": "MIT",
  "frameworks": "*",
  "platforms": "ststm32",
  "examples": "examples/*/*/*.ino",
  "headers": ["STM32TimerInterrupt.h", "STM32_ISR_Timer.h", "STM32_ISR_Timer.hpp"]
}
